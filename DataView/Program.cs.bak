using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Drawing;
using System.Drawing.Imaging;

namespace DataView
{
    /// <summary>
    /// 
    /// </summary>
    class Program
    {
        private static Data sample;
        private static VolumetricData vData;
        private static Data sample2;
        private static VolumetricData vData2;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="args"></param>
        static void Main(string[] args)
        {
            string fileName = @"P01_a_MikroCT-nejhrubsi_rozliseni_DICOM_liver-1st-important_Macro_pixel-size53.0585um.mhd";
            string fileName2 = @"P01_b_Prase_1_druhe_vys.mhd";

            //----------------------------------------MICRO CT------------------------------------------------
            sample = new Data();
            sample.SetFeatures(fileName);
            vData = new VolumetricData(sample);
            Console.WriteLine("Reading first data.");
            vData.Read();
            Console.WriteLine("Data read succesfully.");
            IFeatureComputer fc = new FeatureComputer();
            ISampler s = new Sampler();

            Console.WriteLine("Sampling");
            Point3D[] points = s.Sample(vData, 10);

            FeatureVector[] featureVectors = new FeatureVector[points.Length];

            Console.WriteLine("Computing feature vectors.");
            for (int i = 0; i < points.Length; i++)
            {
                featureVectors[i] = fc.ComputeFeatureVector(vData, points[i]);
                Console.WriteLine("fv1:" + i + " " + featureVectors[i].ToString());
            }

            //----------------------------------------MACRO CT------------------------------------------------
            sample2 = new Data();
            sample2.SetFeatures(fileName2);
            vData2 = new VolumetricData(sample2);
            Console.WriteLine("\nReading second data.");
            vData2.Read();
            Console.WriteLine("Data read succesfully.");
            IFeatureComputer fc2 = new FeatureComputer();
            ISampler s2 = new Sampler();

            Console.WriteLine("Sampling");
            Point3D[] points2 = s2.Sample(vData2, 500);
            FeatureVector[] featureVectors2 = new FeatureVector[points2.Length];

            //int[] m = vData.GetMeassures();
            //Console.WriteLine("x:" + m[0] + " y:" + m[1] + " z:" + m[2]);

            //Console.WriteLine("Going through the data.");
            //int aaa = 0;
            //int bbb = 0;
            //int ccc = 0;
            //for (int k = 0; k < m[2]; k++)
            //{
            //    for (int i = 0; i < m[0]; i++)
            //    {
            //        for (int j = 0; j < m[1]; j++)
            //        {
            //            double a = vData.vData[k][i, j];
            //            // DEBUG 
            //            //double b = vData2.GetValue(i * vData2.GetXSpacing(), j * vData2.GetYSpacing(), k * vData2.GetZSpacing());
            //            double b = vData.GetValue(i, j, k);
            //            if ((a - b) > 1)
            //            {
            //                aaa++;
            //                if ((a - b) > a * 0.5)
            //                {
            //                    bbb++;
            //                }

            //                Console.WriteLine("a:" + a + " b:" + b);
            //            }
            //            if (b == 0 && a != 0)
            //            {
            //                //Console.WriteLine("x:" + i + " y:" + j + " z:" + k);
            //                //Console.WriteLine(a);
            //                ccc++;
            //            }
            //        }
            //    }
            //}
            //Console.WriteLine("Count of mistakes ................................." + aaa);
            //Console.WriteLine("Count of mistakes (abs < 75%) ....................." + bbb);
            //Console.WriteLine("Count of mistakes (b==0) .........................." + ccc);


            Console.WriteLine("Computing feature vectors.");
            for (int i = 0; i < points2.Length; i++)
            {
                featureVectors2[i] = fc2.ComputeFeatureVector(vData2, points2[i]);
                Console.WriteLine("fv2:" + i + " " + featureVectors2[i].ToString());
            }


            IMatcher matcher = new Matcher();
            Console.WriteLine("Matching.");
            Match[] matches = matcher.Match(featureVectors, featureVectors2);
            Console.WriteLine(".......................... MATCHES ..............................");
            for (int i = 0; i < matches.Length; i++)
            {
                Console.WriteLine(matches[i].ToString());
            }

            Console.ReadKey();

            // ------------------------------------------Cut-------------------------------------------
            //int distance = 250;
            //int direction = 2;

            //double[] point = { 150, 500, 150};
            //double[] v1 = { 1, 0, 0};
            //double[] v2 = { 0, 0, 1 };
            //double[] v3 = { 2, 1, 5 };
            //int xRes = 500;
            //int yRes = 500;
            //double spacing = 0.5;
            //string finalFile = GenerateFinalFileName(point, v1, v2, xRes, yRes, spacing);

            //if (ControlData(fileName2, distance, direction))
            //{
            //    //int[] dimenses = vData.GetMeassures();
            //    //Console.WriteLine(dimenses[0] + " " + dimenses[1] + " " + dimenses[2]);
            //    //Console.ReadKey();
            //    double[] spacings = { vData.GetXSpacing(), vData.GetYSpacing(), vData.GetZSpacing() };
            //    double[] realPoint = new double[3];
            //    for (int i = 0; i < realPoint.Length; i++)
            //    {
            //        realPoint[i] = point[i] * spacings[i];
            //    }
            //    int[,] cut = vData.Cut(realPoint, v1, v2, xRes, yRes, spacing);

            //    Console.WriteLine("Cut finished");
            //    PictureMaker pm = new PictureMaker(cut);
            //    Bitmap bitmap = pm.MakeBitmap();
            //    Console.WriteLine("Bitmap finished");
            //    Console.ReadKey();

            //    try
            //    {
            //        bitmap.Save(finalFile, System.Drawing.Imaging.ImageFormat.Bmp);
            //    }
            //    catch (Exception e)
            //    {

            //        Console.Write(e.Message);
            //    }
            //}
            //else
            //{
            //    Console.WriteLine("The distance is higher than the dimension.");
            //    Console.ReadKey();
            //}
            // ------------------------------------------Cut-------------------------------------------

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fileName"></param>
        public static void TestData(string fileName)
        {
            Data d = new Data();
            d.SetFeatures(fileName);
            string s = "type: " + d.ElementType + " file: " + d.ElementDataFile + " dimSize: ";
            for (int i = 0; i < d.DimSize.Length; i++)
            {
                s += d.DimSize[i] + " ";
            }
            s += "spacing: ";
            for (int i = 0; i < d.ElementSpacing.Length; i++)
            {
                s += d.ElementSpacing[i] + " ";
            }

            Console.Write(s);
            Console.ReadKey();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fileName"></param>
        public static Boolean ControlData(string fileName, int distance, int direction)
        {
            sample = new Data();
            sample.SetFeatures(fileName);
            vData = new VolumetricData(sample);
            vData.Read();

            if (distance < sample.DimSize[direction])
            {
                return true;
            }
            else
            {
                return false;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="distance"></param>
        /// <param name="direction"></param>
        /// <param name="iSpacing"></param>
        /// <returns></returns>
        public static string GenerateFinalFileName(double[] point, double[] v1, double[] v2, int xRes, int yRes, double spacing)
        {
            string p = "p" + point[0] + "-" + point[1] + "-" + point[2];
            string v = "v" + v1[0] + "-" + v1[1] + "-" + v1[2] + "_" + v2[0] + "-" + v2[1] + "-" + v2[2];
            string r = "r" + xRes + "-" + yRes;

            return "testCut" + "_" + p + "_" + v + "_" + r + "_" + spacing + ".bmp";
        }

    }
}

